{
    "LOOP_START": {
        "description": "Marks the start of a loop block",
        "operation": "loop_start = registers['PC']"
    },
    "LOOP_END": {
        "description": "Marks the end of a loop block",
        "operation": "if loop_condition and loop_start is not None: registers['PC'] = loop_start - 1"
    },
    "IF": {
        "description": "Conditional check for loop continuation",
        "operation": "loop_condition = eval(f'registers[\"{args[0]}\"] {args[1]} {get_value(args[2])}')"
    },
    "MOV": {
        "description": "Moves a value into a register",
        "operation": "registers[args[0]] = get_value(args[1])"
    },
    "ADD": {
        "description": "Adds the value of one register to another",
        "operation": "registers[args[0]] += get_value(args[1])"
    },
    "SUB": {
        "description": "Subtracts the value of one register from another",
        "operation": "registers[args[0]] -= get_value(args[1])"
    },
    "CMP": {
        "description": "Compares two values (registers or immediate values)",
        "operation": "flags['ZF'] = (get_value(args[0]) == get_value(args[1]))"
    },
    "JEQ": {
        "description": "Jumps to a label if the last comparison was equal",
        "operation": "if flags['ZF']: registers['PC'] = labels[args[0]] - 1"
    },
    "JMP": {
        "description": "Unconditionally jumps to a label",
        "operation": "registers['PC'] = labels[args[0]] - 1"
    },
    "SETPIX": {
        "description": "Sets a pixel on the display",
        "operation": "display[get_value(args[1]), get_value(args[0])] = get_value(args[2])"
    },
    "HLT": {
        "description": "Halts the program",
        "operation": "execution_halted = True"
    },
    "TIME": {
        "description": "Stores the current time in a register",
        "operation": "registers[args[0]] = int(time.time() * 1000)"
    },
    "OUT": {
        "description": "Outputs the value of a register",
        "operation": "print(f'OUT: {registers[args[0]]}')"
    },
    "DIV": {
        "description": "Divides the value of one register by another",
        "operation": "registers[args[0]] //= get_value(args[1])"
    }
}
